// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_my_blueprint/test/ui/github_repository/search/github_repository_search_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_my_blueprint/data/repositories/auth/auth_repository.dart'
    as _i8;
import 'package:flutter_my_blueprint/data/services/api/github_repository/search/github_repository_search_api.dart'
    as _i7;
import 'package:flutter_my_blueprint/data/services/api/model/github_repository/github_repository.dart'
    as _i2;
import 'package:flutter_my_blueprint/domain/model/auth/auth_state.dart' as _i3;
import 'package:flutter_my_blueprint/domain/usecase/github_repository/search/github_repository_search_load_more_usecase.dart'
    as _i6;
import 'package:flutter_my_blueprint/domain/usecase/github_repository/search/github_repository_search_usecase.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

import 'github_repository_search_viewmodel_test.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGithubSearchRepositoriesResponse_0 extends _i1.SmartFake
    implements _i2.GithubSearchRepositoriesResponse {
  _FakeGithubSearchRepositoriesResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(parent, parentInvocation);
}

class _FakeAuthState_1 extends _i1.SmartFake implements _i3.AuthState {
  _FakeAuthState_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GithubRepositorySearchUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGithubRepositorySearchUseCase extends _i1.Mock
    implements _i4.GithubRepositorySearchUseCase {
  MockGithubRepositorySearchUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<(List<_i2.GithubRepository>, int, bool)> call(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#call, [query]),
            returnValue:
                _i5.Future<(List<_i2.GithubRepository>, int, bool)>.value((
                  <_i2.GithubRepository>[],
                  0,
                  false,
                )),
          )
          as _i5.Future<(List<_i2.GithubRepository>, int, bool)>);
}

/// A class which mocks [GithubRepositorySearchLoadMoreUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGithubRepositorySearchLoadMoreUseCase extends _i1.Mock
    implements _i6.GithubRepositorySearchLoadMoreUseCase {
  MockGithubRepositorySearchLoadMoreUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<(List<_i2.GithubRepository>, int, bool)> call(
    (String, bool, int)? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i5.Future<(List<_i2.GithubRepository>, int, bool)>.value((
                  <_i2.GithubRepository>[],
                  0,
                  false,
                )),
          )
          as _i5.Future<(List<_i2.GithubRepository>, int, bool)>);
}

/// A class which mocks [GithubRepositorySearchApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockGithubRepositorySearchApi extends _i1.Mock
    implements _i7.GithubRepositorySearchApi {
  MockGithubRepositorySearchApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.GithubSearchRepositoriesResponse> searchRepositories(
    String? searchKeyword,
    int? page,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#searchRepositories, [searchKeyword, page]),
            returnValue: _i5.Future<_i2.GithubSearchRepositoriesResponse>.value(
              _FakeGithubSearchRepositoriesResponse_0(
                this,
                Invocation.method(#searchRepositories, [searchKeyword, page]),
              ),
            ),
          )
          as _i5.Future<_i2.GithubSearchRepositoriesResponse>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i8.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AuthState login(String? githubApiToken) =>
      (super.noSuchMethod(
            Invocation.method(#login, [githubApiToken]),
            returnValue: _FakeAuthState_1(
              this,
              Invocation.method(#login, [githubApiToken]),
            ),
          )
          as _i3.AuthState);

  @override
  void logout() => super.noSuchMethod(
    Invocation.method(#logout, []),
    returnValueForMissingStub: null,
  );

  @override
  _i3.AuthState fetchAuthState() =>
      (super.noSuchMethod(
            Invocation.method(#fetchAuthState, []),
            returnValue: _FakeAuthState_1(
              this,
              Invocation.method(#fetchAuthState, []),
            ),
          )
          as _i3.AuthState);
}

/// A class which mocks [ChangeListener].
///
/// See the documentation for Mockito's code generation for more information.
class MockChangeListener<T> extends _i1.Mock implements _i9.ChangeListener<T> {
  MockChangeListener() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void call(T? previous, T? next) => super.noSuchMethod(
    Invocation.method(#call, [previous, next]),
    returnValueForMissingStub: null,
  );
}
